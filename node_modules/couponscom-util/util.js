/**
 * Component service include general common funtionalities that is across component
 * Usage:
 *      var util = require('couponscom-util');
 */

'use strict';

var dateFormat = require('dateformat'),
    UUID = require('node-uuid'),
    inflection = require('inflection'),
    concat = require('unique-concat');

module.exports = (function() {

    Date.prototype.addDays = function (numDay) {
        var time = this.getTime(),
            changedDate = new Date(time + (numDay * 24 * 60 * 60 * 1000));
        this.setTime(changedDate.getTime());
        return this;
    };

    /**
     * Function to generate assigned date
     * @method getAssignedDate()
     */
    function getAssignedDate(numDay, currDate) {
        var resultDate;
        try {
            resultDate = currDate.addDays(numDay);
        } catch(ex) { /* istanbul ignore next */
            resultDate = new Date().addDays(numDay);
        }
        return resultDate;
    }

    /**
     * Helper function to get date in mm/dd/yy format
     * method getShortDateFormat
     */
    function getShortDateFormat(currDate) {
        var shortDate = '';
        try {
            shortDate = dateFormat(new Date(currDate), 'mm/dd/yy');
        } catch(ex) {}
        return shortDate;
    }

    /**
     * Helper function to get date format in yyyy-mm-dd format
     * @method getISODateFormat
     */
    function getISODateFormat(currDate) {
        var isoDate = '';
        try {
            isoDate = dateFormat(new Date(currDate), 'isoDate');
        } catch(ex) {}
        return isoDate;
    }

    /**
     * Function return month in "short" format
     * @method getShortMonth
     */
    function getShortMonth(currDate) {
        var shortMonth = '';
        try {
            shortMonth = dateFormat(new Date(currDate), 'mmm');
        } catch(ex) {}
        return shortMonth;
    }

    /**
     * Function to get full date
     * @method getFullDate
     */
    function getFullDate(currDate) {
        var fullDate = '';
        try {
            fullDate = dateFormat(new Date(currDate), 'mmmm dS yyyy');
        } catch(ex) {}
        return fullDate;
    }

    /**
     * Helper function to clone an object to new variable NOT by reference
     * Based on performance result from http://jsperf.com/cloning-an-object/2,
     * we will choose clone function, which result the highest performance
     * @method cloneObj
     */
    function cloneObj(obj) {
        var target = {};
        for (var i in obj) {
            /* istanbul ignore else */
            if (obj.hasOwnProperty(i)) {
                target[i] = obj[i];
            }
        }
        return target;
    }

    /**
     * Helper function to extend the current object
     * @method extendObj
     */
    function extendObj(obj1, obj2) {
        // Don't do anything if add isn't an object
        if (!obj2 || typeof obj2 !== 'object') {
            return obj1;
        }

        var keys = Object.keys(obj2),
            i = keys.length;
        while (i--) {
            obj1[keys[i]] = obj2[keys[i]];
        }
        return obj1;
    }

    /**
     * Helper function to check for is empty object
     * @method isEmptyObject
     */
    function isEmptyObj(obj) {
        try {
            var isEmpty = (!Object.keys(obj).length);
            return isEmpty;
        } catch(ex) {
            return true;
        }
    }

    /**
     * Helper function to filter out empty/null element in array object
     * @method removeEmptyObjFromArr
     */
    function removeEmptyObjFromArr(arr) {
        return (arr.filter(function(el) {
            return (!!el);
        }));
    }

    /**
     * Helper function to remove specific element in array
     * @method removeElemFromArr
     */
    function removeElemFromArr(arr, elem) {
        return (arr.filter(function(el) {
            return (el !== elem);
        }));
    }

    /**
     * Helper function to concat 2 array and just merge unique element between 2 array
     * Wrapper for unique-concat npm package
     * @method uniqueConcat
     */
    function uniqueConcat(arr1, arr2, identity) {
        if (identity === undefined) {
            return concat(arr1, arr2);
        }
        return concat(arr1, arr2, identity);
    }

    /**
     * Helper function to create array intersect between 2 array
     * @method arrayIntersect
     */
    function arrayIntersect(arr1, arr2) {
        var d = {},
            results = [];
        for (var i = 0; i < arr2.length; i++) {
            d[arr2[i]] = true;
        }
        for (var j = 0; j < arr1.length; j++) {
            if ((d[arr1[j]]) && (results.indexOf(arr1[j]) < 0)) {
                results.push(arr1[j]);
            }
        }
        return results;
    }

    /**
     * Helper function generate guuid ID,
     * Wrapping around node-uuid so that it's easier to switch if needed in the future
     * Choosing node-uuid based on jsperf: http://jsperf.com/node-uuid-performance/11
     * @method generateGUUID
     */
    function generateGUUID() {
        return UUID.v4();
    }

    /**
     * Helper function to title-ize a string
     * Wrapper of inflection npm
     * @method titleize
     */
    function titleize(str) {
        return inflection.titleize(str);
    }

    return {
        getAssignedDate: getAssignedDate,
        getShortDateFormat: getShortDateFormat,
        getISODateFormat: getISODateFormat,
        getShortMonth: getShortMonth,
        getFullDate: getFullDate,
        cloneObj: cloneObj,
        extendObj: extendObj,
        isEmptyObj: isEmptyObj,
        removeEmptyObjFromArr: removeEmptyObjFromArr,
        removeElemFromArr: removeElemFromArr,
        arrayIntersect: arrayIntersect,
        uniqueConcat: uniqueConcat,
        generateGUUID: generateGUUID,
        titleize: titleize
    };

}());
