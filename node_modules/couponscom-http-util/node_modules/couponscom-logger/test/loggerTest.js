/*global describe:false, it:false, before:false, after:false, beforeEach: false, afterEach:false*/

'use strict';

var logger, //= require('../logger'),
    assert = require('assert');

describe('couponscom-logger', function(){

    describe('verify add the file transport', function(){
        it ('production', function() {
            process.env.NODE_ENV =  'production';
            logger = require('../logger');
            assert.equal(logger.default.transports.console, undefined);
            assert.equal(logger.default.transports.file, undefined);
            assert.notEqual(logger.default.transports.dailyRotateFile, undefined);
            assert.equal(logger.default.transports.dailyRotateFile.handleExceptions, true);
            assert.equal(logger.default.transports.dailyRotateFile.dirname, '/home/ci/logs/web/node/');
            assert.equal(logger.default.transports.dailyRotateFile.json, false);
            assert.equal(logger.default.transports.dailyRotateFile.level, 'metric');
            assert.equal(typeof logger.default.transports.dailyRotateFile.timestamp, 'function');
            assert.equal(typeof logger.default.transports.dailyRotateFile.timestamp(), 'string');
        });

        /*it('should have called add function', function() {
            logger.info('test', function (transport, level, msg, meta) {
                assert.equal(level, 'info');
                assert.equal(msg, 'test');
            });
        });*/
    });
});

//With the way logger component object is written right now, there is only one winston object, therefore
//it could not be overwrite based on environment set up, since 'require' only run once, and will not process the second time
//If we need to test this in 2 different env, addition set up for logger need to be called in function such as 'init' and middleware will need to process in middleware
