/*jshint maxparams:3, maxdepth: 5, maxstatements: 30, maxcomplexity: 10 */

/**
 * Component service, wrapper of nconf
 * Usage:
 *      var configManager = require('couponscom-config-chain-manager');
 */

'use strict';

var configManager = require('nconf'),
    fs = require('fs'),
    logger = require('couponscom-logger');

/**
 * Helper function to get objData in config file
 * @method getConfData
 */
function getConfData(options) {
    logger.debug(__filename + ': Getting conf data for key=' + options.name + ' in filename=' + options.filename);
    configManager.use(options.name, {
        type: 'file',
        'file': options.filename
    });
    return configManager.get(options.name);
}

//Helper function checking config key is already set
function isKeySet(key) {
    return (configManager.get(key) === undefined) ? false : true;
}

/**
 * Helper function generate config data per feature
 * @method getConfDataPerFeature
 */
function setConfDataPerFeature(options) {
    var feature = configManager.getData(options),
        name = options.name,
        themeName = options.themeName,
        featuresArr = [],
        key = '';
    //Feature set to be in array format
    //If feature data is not set, then we will maintain the parents key result from getData() reading
    try {
        if (feature.length === undefined) {
            key = (!!themeName) ? (name + '_' + themeName) : (name + '_base');
            logger.debug(__filename + ': No features assigned. Set stored value for key=' + key);
            if (!isKeySet(key)) { //Prevent key overwritten
                logger.debug(__filename + ': Set key config for key=' + key);
                configManager.set(key, feature);
            }
            configManager.remove(name);
        } else {
            logger.debug(__filename + ': Features exist. Set config value per feature');
            for (var i = 0; i < feature.length; i++) {
                featuresArr = feature[i].forBuckets;
                //If there is no feature set, then figure it's just configured per theme.
                for (var j = 0; j < featuresArr.length; j++) {
                    logger.debug(__filename + ': Set config value for feature=' + featuresArr[j]);
                    key = name + '_' + themeName + '_' + featuresArr[j];
                    if (!isKeySet(key)) {
                        logger.debug(__filename + ': Set key config for key=' + key);
                        configManager.set(key, feature[i].value);
                    }
                }
            }
            configManager.remove(name);
        }
    } catch(ex) {
        logger.error(__filename + ': Keyname does not exist. Parsing feature set for keyname=' + name + ', feature value= ' + feature + ' throw Exception=' + ex);
    }

}

//Helper function walk through directory and subdirectories for file reading
function walkFiles (dir, callback) {
    var files = fs.readdirSync(dir),
        name = '';
    for (var i in files) {
        name = dir + '/' + files[i];
        if (fs.statSync(name).isDirectory()){
            walkFiles(name, callback);
        } else {
            callback(name, files[i]);
        }
    }
}

/**
 * Returns vaue of variable object in config file
 * Get function can handle environment awareness
 * @params JSON object contains the following option
 *
 * @method getData
 */
configManager.getData = function(options) {
    var name = options.name,
        env = options.env || '',
        fileSuffix = (env === '') ? '' : ('_' + env.toLowerCase()),
        basefile = options.filename,
        filename = options.filename.replace(/\.json$/i, (fileSuffix + '.json'));

    if ((fileSuffix !== '') && fs.existsSync(filename)) { //Reading file with env awareness
        logger.debug(__filename + ': Reading ENV awareness filename=' + filename);
        return getConfData({
            name: name,
            filename: filename
        });
    }

    logger.debug(__filename + ': Reading config data from basefile=' + basefile);
    return getConfData({
        name: name,
        filename: basefile
    });
};

/**
 * Set up config data dynamically per features.
 * The input object is in the form below
 *  "ui-name": {
        "forBuckets": ["DEFAULT", "feature1"],
        "value": {object}
    }
 *
 * @method setFeatureData
 */
configManager.setFeatureData = function(options) {
    var name = options.name,
        dirname = options.dirname,
        env = options.env || '',
        themeName = '',
        re = new RegExp('/', 'g');
    try {
        walkFiles(dirname, function(filepath, filename) {
            themeName = filepath.replace(dirname, '')
                                .replace(re, '')
                                .replace(filename, '');
            logger.debug(__filename + ': Reading filename=' + filename + ' with filepath=' + filepath + '; read themeName=' + themeName);
            //Setting feature confiugration in the form below
            //Eg: {uiname}_{themeName}_{bucketTest}
            setConfDataPerFeature({
                name: name,
                themeName: themeName, //Eg: winndixie
                filename: filepath, //taking the full filepath for nconf reading
                env: env
            });
        });
    } catch(ex) { /* istanbul ignore next */
        logger.error(__filename + ': Reading config file in folder=' + dirname + ' throw Exception=' + ex);
    }
};

//Helper funtion getting base value
function getBaseValue(options) {
    logger.debug(__filename + ': Undefined feature data. Fall back to get base value with options=' + JSON.stringify(options));
    var key = options.name + '_' + options.themeName,
        default_key = key + '_DEFAULT', //Key for default feature (still per theme)
        base_key = options.name + '_base'; //base key without theme awareness
    return (configManager.get(default_key) || configManager.get(key) || configManager.get(base_key) || '');
}

/**
 * Function getting config data per feature
 * @param {object} options contains name, themeName, featurename
 * @method getFeatureData
 */
configManager.getFeatureData = function(options) {
    var featuredata = '';
    if (!options || options.name === undefined) {
        logger.error(__filename + ': Error calling getFeatureData, invalid parameter passed in function call. Expect name to pass as parameter value');
        return featuredata;
    }
    try {
        logger.debug(__filename + ': Getting feature data for key=' + options.name);
        //Eg: {uiname}_{themeName}_{bucketTest}
        var featurename = (!!options.featurename) ? options.featurename : 'DEFAULT',
            key = options.name + '_' + options.themeName,
            key_feature = key + '_' + featurename,
            value = configManager.get(key_feature) || '';
        featuredata = ((!!value) ? value : getBaseValue(options));
    } catch(ex) { /* istanbul ignore next */
        logger.warn(__filename + ': getFeatureData throws exception=' + ex);
    }
    return featuredata;
};

module.exports = configManager;
