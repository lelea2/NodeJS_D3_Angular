/*global describe:false, it:false, before:false, after:false, beforeEach:false, afterEach:false*/

'use strict';

var express = require('express'),
    request = require('supertest'),
    bodyParser = require('body-parser'),
    httpUtil = require('../httpUtil'),
    logger = require('couponscom-logger/logger'),
    assert = require('assert');


describe('couponscom-http-util', function() {

    beforeEach(function () {
        logger.debug = function() {};
        logger.info = function() {};
        logger.error = function() {};
        logger.warn = function() {};
        logger.notice = function() {};
    });

    describe('verify initialize() method', function () {
        it('initialize()', function (done) {
            //Faking req, res
            var app = express();

            app.use(httpUtil.initialize());

            app.use(function(req, res) {
                var result = httpUtil.initialize();
                res.end(req.query.pid);
            });
            request(app)
            .get('/?pid=13306&Nid=10&crid=test')
            .expect('13306', done);
        });

        it('initialize()', function (done) {
            //Faking req, res
            var app = express();

            app.use(httpUtil.initialize());

            app.use(function(req, res) {
                var result = httpUtil.initialize();
                res.end(req.query.nid);
            });
            request(app)
            .get('/?pid=13306&Nid=10&CRID=test')
            .expect('10', done);
        });

        it('initialize()', function (done) {
            //Faking req, res
            var app = express();

            app.use(httpUtil.initialize());

            app.use(function(req, res) {
                var result = httpUtil.initialize();
                res.end(req.query.crid);
            });
            request(app)
            .get('/?pid=13306&Nid=10&CRID=test')
            .expect('test', done);
        });
    });

    describe('verify getCurrentRoute() method', function() {
        //Note: having to fake route here because we don't want to call real express.Router()
        it('should return empty and throw error if request object not passed', function() {
            assert.equal(httpUtil.getCurrentRoute(), '');

            //Faking request object
            var req1 = {};
            assert.equal(httpUtil.getCurrentRoute(req1), '');

            var req2 = {route: {}};
            assert.equal(httpUtil.getCurrentRoute(req2), '');
        });

        it('should return empty and throw error if request object not passed', function() {
            var req = {route: {path: '/'}};
            assert.equal(httpUtil.getCurrentRoute(req), '/');
        });
    });

    describe('verify getQueryValue() method', function() {
        it('return correct parameter value in case-insensitive', function (done) {
            //Faking req, res
            var app = express();

            app.use(httpUtil.initialize()); //This is the way we're testing middleware

            app.use(function(req, res) {
                res.end(httpUtil.getQueryValue('Crid'));
            });
            request(app)
            .get('/?pid=13306&Nid=10&CRID=test')
            .expect('test', done);
        });

        it('return empty string when parameter not exists', function (done) {
            //Faking req, res
            var app = express();

            app.use(httpUtil.initialize()); //This is the way we're testing middleware

            app.use(function(req, res) {
                res.end(httpUtil.getQueryValue('bid'));
            });
            request(app)
            .get('/?pid=13306&Nid=10&CRID=test')
            .expect('', done);
        });


        it('retun correct parameter value in case-insensitive', function (done) {
            //Faking req, res
            var app = express();

            app.use('/', function(req, res) {
                res.end(httpUtil.getQueryValue('pid', req));
            });
            request(app)
            .get('/?pid=13306&nid=10&crid=test')
            .expect('13306', done);
        });

        it('retun correct parameter value in case-insensitive', function (done) {
            //Faking req, res
            var app = express();

            app.use('/', function(req, res) {
                res.end(httpUtil.getQueryValue('Nid', req));
            });
            request(app)
            .get('/?pid=13306&nid=10&crid=test')
            .expect('10', done);
        });

        it('retun correct parameter value in case-insensitive', function (done) {
            //Faking req, res
            var app = express();

            app.use('/', function(req, res) {
                res.end(httpUtil.getQueryValue('CRID',  req));
            });
            request(app)
            .get('/?pid=13306&nid=10&crid=test')
            .expect('test', done);
        });

        it('retun correct parameter value in case-insensitive', function (done) {
            //Faking req, res
            var app = express();
            app.use(bodyParser());

            app.use('/', function(req, res) {
                res.send(httpUtil.getQueryValue('crid', req));
            });

            request(app)
            .post('/')
            .send({crid: 'test'})
            .expect('test', done);
        });

        it('retun correct parameter value in case-insensitive', function (done) {
            //Faking req, res
            var app = express();
            app.use(bodyParser());

            app.use('/', function(req, res) {
                res.send(httpUtil.getQueryValue('crid', req));
            });

            request(app)
            .post('/')
            .send({pid: 'test'})
            .expect('', done);
        });
    });

    describe('verify getCurrentURI() method', function () {
        it('return correct url', function (done) {
            //Faking req, res
            var app = express();

            app.use(httpUtil.initialize());

            app.use(function(req, res) {
                res.end(httpUtil.getCurrentURI());
            });
            request(app)
            .get('/?pid=13306&Nid=10&CRID=test')
            .expect('/?pid=13306&Nid=10&CRID=test', done);
        });

        it('return correct url', function (done) {
            var app = express();
            app.use('/', function(req, res) {
                res.end(httpUtil.getCurrentURI(req));
            });
            request(app)
            .get('/?pid=13306&nid=10&crid=test')
            .expect('/?pid=13306&nid=10&crid=test', done);
        });
    });

    describe('verify getCurrentHost() method', function() {
        it('return correct host', function(done) {
            //Faking req, res
            var app = express();

            app.use(httpUtil.initialize());

            app.use(function(req, res) {
                res.end(httpUtil.getCurrentHost());
            });
            request(app)
            .get('/')
            .expect('', done);
        });
    });

    describe('verify getCurrentPath() method', function () {
        it('return correct path', function (done) {
            //Faking req, res
            var app = express();

            app.use(httpUtil.initialize());

            app.use(function(req, res) {
                res.end(httpUtil.getCurrentPath());
            });
            request(app)
            .get('/brands/search/?pid=13306&Nid=10&CRID=test')
            .expect('/brands/search/', done);
        });

        it('return correct path', function (done) {
            var app = express();
            app.use('/', function(req, res) {
                res.end(httpUtil.getCurrentPath(req));
            });
            request(app)
            .get('/search?pid=13306&nid=10&crid=test')
            .expect('/search', done);
        });
    });

    describe('verify getReferrerURL() method', function () {
        it('return correct referer url', function (done) {
            //Faking req, res
            var app = express();

            app.use(httpUtil.initialize());

            app.use(function(req, res) {
                res.end(httpUtil.getReferrerURL());
            });
            request(app)
            .get('/hppub?pid=13306&Nid=10&CRID=test')
            .set('referer', '/')
            .expect('/', done);
        });

        it('return correct referrer url', function (done) {
            var app = express();
            app.use('/', function(req, res) {
                res.end(httpUtil.getReferrerURL(req));
            });
            request(app)
            .get('/search?pid=13306&nid=10&crid=test')
            .expect('', done);
        });

        it('return correct referrer url', function (done) {
            var app = express();
            app.use('/', function(req, res) {
                req.headers.referer = '/coupons';
                res.end(httpUtil.getReferrerURL(req));
            });
            request(app)
            .get('/search?pid=13306&nid=10&crid=test')
            .expect('/coupons', done);
        });
    });

    describe('verify getCurrentProtocol() method', function() {
        it('return http protocol for request', function (done) {
            //Faking req, res
            var app = express();
            app.use(function(req, res) {
                res.end(httpUtil.getCurrentProtocol(req));
            });
            request(app)
            .get('/')
            .expect('http', done);
        });

        it('return empty for invalid request', function (done) {
            //Faking req, res
            var app = express();
            app.use(function(req, res) {
                res.end(httpUtil.getCurrentProtocol(null));
            });
            request(app)
            .get('/')
            .expect('', done);
        });

        it('Return http if ENV = development; x-ci-secure IS set; orig protocol is http', function (done) {
            //Faking req, res
            var app = express();
            process.env.NODE_ENV = 'development';
            app.use(function(req, res, next){
                req.headers['x-ci-secure'] = '1';
                next();
            });
            app.use(function(req, res) {
                res.end(httpUtil.getCurrentProtocol(req));
            });
            request(app)
            .get('/')
            .expect('http', done);
        });

        it('Return https if ENV = production; x-ci-secure IS set; orig protocol is http', function (done) {
            //Faking req, res
            var app = express();
            process.env.NODE_ENV = 'production';
            app.use(function(req, res, next){
                req.headers['x-ci-secure'] = '1';
                next();
            });
            app.use(function(req, res) {
                res.end(httpUtil.getCurrentProtocol(req));
            });
            request(app)
            .get('/')
            .expect('https', done);
        });

        it('Return http if ENV = production; x-ci-secure IS set to not be 1; orig protocol is http', function (done) {
            //Faking req, res
            var app = express();
            process.env.NODE_ENV = 'production';
            app.use(function(req, res, next){
                req.headers['x-ci-secure'] = '0';
                next();
            });
            app.use(function(req, res) {
                res.end(httpUtil.getCurrentProtocol(req));
            });
            request(app)
            .get('/')
            .expect('http', done);
        });

        it('Return http if ENV = production; x-ci-secure is not set; origProto is http', function (done) {
            //Faking req, res
            var app = express();
            process.env.NODE_ENV = 'production';
            app.use(function(req, res, next){

                next();
            });
            app.use(function(req, res) {
                res.end(httpUtil.getCurrentProtocol(req));
            });
            request(app)
            .get('/')
            .expect('http', done);
        });

        it('Return https if ENV = production; x-ci-secure is not set; origProto is https', function (done) {
            //Faking req, res
            var app = express();
            process.env.NODE_ENV = 'production';

            app.use(function(req, res) {
                var fakeRequest = {
                    header: {

                    },
                    protocol: 'https'
                };
                res.end(httpUtil.getCurrentProtocol(fakeRequest));
            });
            request(app)
            .get('/')
            .expect('https', done);
        });

    });

    describe('verify getQueryString() method', function() {
        it('return empty if request does not have querystring', function (done) {
            //Faking req, res
            var app = express();
            app.use(function(req, res) {
                res.end(httpUtil.getQueryString(req));
            });
            request(app)
            .get('/?')
            .expect('', done);
        });

        it('return full querystring in request', function (done) {
            //Faking req, res
            var app = express();
            app.use(function(req, res) {
                res.end(httpUtil.getQueryString(req));
            });
            request(app)
            .get('/?test=1&zip=12345&mobile')
            .expect('test=1&zip=12345&mobile=', done);
        });

        it('return empty for invalid request', function (done) {
            //Faking req, res
            var app = express();
            app.use(function(req, res) {
                res.end(httpUtil.getQueryString(null));
            });
            request(app)
            .get('/')
            .expect('', done);
        });
    });

    describe('verify setReqBodyData() method', function() {
        it('should create pagecontextdata and set key value on body page contextdata if req.body not exists', function(done) {
            var app = express();
            app.use(httpUtil.initialize());

            app.use('/', function(req, res) {
                httpUtil.setReqBodyData('test', 'hi');
                res.end(req.body.pageContextData.test);
            });
            request(app)
            .get('/')
            .expect('hi', done);
        });

        it('should create pagecontextdata and set key value on body page contextdata if pagecontextdata not exist', function(done) {
            var app = express();
            app.use('/', function(req, res) {
                req.body = {'test': 'somethingtotest'};
                httpUtil.setReqBodyData('test1', 'test1', req);
                res.end(req.body.pageContextData.test1);
            });
            request(app)
            .get('/')
            .expect('test1', done);
        });

        it('should create pagecontextdata and set key value on body page contextdata if for existing page contextData', function(done) {
            var app = express();
            app.use('/', function(req, res) {
                req.body = {'pageContextData': {}};
                httpUtil.setReqBodyData('testing', 'test1', req);
                res.end(req.body.pageContextData.testing);
            });
            request(app)
            .get('/')
            .expect('test1', done);
        });

        it('should overwrite ste key value on body page contextdata if for existing page contextData', function(done) {
            var app = express();
            app.use('/', function(req, res) {
                req.body = {'pageContextData': {'test': 'hi'}};
                httpUtil.setReqBodyData('test', 'test2', req);
                res.end(req.body.pageContextData.test);
            });
            request(app)
            .get('/')
            .expect('test2', done);
        });
    });

    describe('verify getReqBodyData() method', function() {
        it('should return empty if req.body undefined', function(done) {
            var app = express();
            app.use(httpUtil.initialize());

            app.use('/', function(req, res) {
                res.end(httpUtil.getReqBodyData('test'));
            });
            request(app)
            .get('/')
            .expect('', done);
        });

        it('should return empty if req.body.pageContextData undefined', function(done) {
            var app = express();
            app.use('/', function(req, res) {
                req.body = {};
                res.end(httpUtil.getReqBodyData('test', req));
            });
            request(app)
            .get('/')
            .expect('', done);
        });

        it('should return empty if key is not exist in page context data', function(done) {
            var app = express();
            app.use('/', function(req, res) {
                req.body =  {
                    pageContextData: {}
                };
                res.end(httpUtil.getReqBodyData('test', req));
            });
            request(app)
            .get('/')
            .expect('', done);
        });

        it('should return value for key in pagecontextdata', function(done) {
            var app = express();
            app.use('/', function(req, res) {
                req.body = {
                    pageContextData: {'test': 'hi'}
                };
                res.end(httpUtil.getReqBodyData('test', req));
            });
            request(app)
            .get('/')
            .expect('hi', done);
        });
    });

    describe('verify updateQueryStringParamater() method', function() {
        it('should append value to the end of url', function() {
            var result = httpUtil.updateQueryStringParameter('http://www.coupons.com', 'test', 'dummy');
            assert.equal(result, 'http://www.coupons.com?test=dummy');
        });

        it('should append value to the end of url', function() {
            var result = httpUtil.updateQueryStringParameter('http://www.coupons.com/', 'test', 'dummy');
            assert.equal(result, 'http://www.coupons.com/?test=dummy');
        });

        it('should append value to the end of url', function() {
            var result = httpUtil.updateQueryStringParameter('http://www.coupons.com/#', 'test', 'dummy');
            assert.equal(result, 'http://www.coupons.com/?test=dummy#');
        });

        it('should append value to the end of url', function() {
            var result = httpUtil.updateQueryStringParameter('http://www.coupons.com/?pid=13306', 'test', 'dummy');
            assert.equal(result, 'http://www.coupons.com/?pid=13306&test=dummy');
        });

        it('should append value to the end of url', function() {
            var result = httpUtil.updateQueryStringParameter('http://www.coupons.com/?pid=13306&nid=10&zid=iq37', 'test', 'dummy');
            assert.equal(result, 'http://www.coupons.com/?pid=13306&nid=10&zid=iq37&test=dummy');
        });

        it('should append value to the end of url', function() {
            var result = httpUtil.updateQueryStringParameter('http://www.coupons.com/?pid=13306#', 'test', 'dummy');
            assert.equal(result, 'http://www.coupons.com/?pid=13306&test=dummy#');
        });

        it('should replace new value when key exists', function() {
            var result = httpUtil.updateQueryStringParameter('http://www.coupons.com/?pid=13306&test=hello', 'test', 'dummy');
            assert.equal(result, 'http://www.coupons.com/?pid=13306&test=dummy');
        });

        it('should replace new value when key exists', function() {
            var result = httpUtil.updateQueryStringParameter('http://www.coupons.com/?test=hello&pid=13306', 'test', 'dummy');
            assert.equal(result, 'http://www.coupons.com/?test=dummy&pid=13306');
        });

        it('should replace new value when key exists', function() {
            var result = httpUtil.updateQueryStringParameter('http://www.coupons.com/?TEST=hello&pid=13306', 'test', 'dummy');
            assert.equal(result, 'http://www.coupons.com/?test=dummy&pid=13306');
        });
    });

    describe('verify getClientIP() method', function() {
        it('should return clientIP on request', function(done) {
            var app = express();

            app.use('/', function(req, res) {
                res.end(httpUtil.getClientIP(req));
            });
            request(app)
                .get('/')
                .set('client-ip', '10.20.20.14')
                .expect('10.20.20.14', done);
        });

        it('should return clientIP on request', function(done) {
            var app = express();

            app.use('/', function(req, res) {
                res.end(httpUtil.getClientIP(req));
            });
            request(app)
                .get('/')
                .expect('127.0.0.1', done);
        });

        it('should return empty on null request', function(done) {
            var app = express();

            app.use('/', function(req, res) {
                res.end(httpUtil.getClientIP(null));
            });
            request(app)
                .get('/')
                .expect('', done);
        });
    });

    describe('verify isMobile() method', function() {
        it('should return false on empty user agent', function(done) {
            var app = express();

            app.use(httpUtil.initialize());
            app.use('/', function(req, res) {
                res.end(httpUtil.isMobile(req).toString());
            });
            request(app)
                .get('/')
                .expect('false', done);
        });

        it('should return false on null user agent', function(done) {
            var app = express();

            app.use(httpUtil.initialize());
            app.use('/', function(req, res) {
                res.end(httpUtil.isMobile(null).toString());
            });
            request(app)
                .get('/')
                .expect('false', done);
        });

        it('should return false if desktop user agent', function(done) {
            var app = express();

            app.use(httpUtil.initialize());
            app.use('/', function(req, res) {
                res.end(httpUtil.isMobile(req).toString());
            });
            request(app)
                .get('/')
                .set('user-agent', 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36') //Chrome desktop
                .expect('false', done);
        });

        it('should return true if android mobile user agent', function(done) {
            var app = express();

            app.use(httpUtil.initialize());
            app.use('/', function(req, res) {
                res.end(httpUtil.isMobile(req).toString());
            });
            request(app)
                .get('/')
                .set('user-agent', 'Android / Firefox 29: Mozilla/5.0 (Android; Mobile; rv:29.0) Gecko/29.0 Firefox/29.0') //android
                .expect('true', done);
        });

        it('should return true if mobile user agent', function(done) {
            var app = express();

            app.use(httpUtil.initialize());
            app.use('/', function(req, res) {
                res.end(httpUtil.isMobile(req).toString());
            });
            request(app)
                .get('/')
                .set('user-agent', 'iOS / Safari 7: Mozilla/5.0 (iPad; CPU OS 7_0_4 like Mac OS X) AppleWebKit/537.51.1 (KHTML, like Gecko) Version/7.0 Mobile/11B554a Safari/9537.53') //iOS
                .expect('true', done);
        });

        describe('verify isTrustedIP() method', function() {
            it('should return false if IP is local', function(done) {
                var app = express();

                app.use('/', function(req, res) {
                    res.end(httpUtil.isTrustedIP(req) ? 'true' : 'false');
                });
                request(app)
                    .get('/')
                    .expect('false', done);
            });

            it('should return true if IP is trusted', function(done) {
                var app = express();

                app.use('/', function(req, res) {
                    res.end(httpUtil.isTrustedIP(req) ? 'true' : 'false');
                });
                request(app)
                    .get('/')
                    .set('client-ip', '172.16.0.12')
                    .expect('true', done);
            });

            it('should return true if IP is private', function(done) {
                var app = express();

                app.use('/', function(req, res) {
                    res.end(httpUtil.isTrustedIP(req) ? 'true' : 'false');
                });
                request(app)
                    .get('/')
                    .set('client-ip', '208.185.32.14')
                    .expect('true', done);
            });

            it('should return true if IP is private', function(done) {
                var app = express();

                app.use('/', function(req, res) {
                    res.end(httpUtil.isTrustedIP(req) ? 'true' : 'false');
                });
                request(app)
                    .get('/')
                    .set('client-ip', '172.28.81.14')
                    .expect('true', done);
            });

            it('should return true if IP is trusted', function(done) {
                var app = express();

                app.use('/', function(req, res) {
                    res.end(httpUtil.isTrustedIP(req) ? 'true' : 'false');
                });
                request(app)
                    .get('/')
                    .set('HTTP_CLIENT_IP', '10.20.20.13')
                    .expect('true', done);
            });

            it('should return true if IP is trusted', function(done) {
                var app = express();

                app.use('/', function(req, res) {
                    res.end(httpUtil.isTrustedIP(req) ? 'true' : 'false');
                });
                request(app)
                    .get('/')
                    .set('REMOTE_ADDR', '10.20.20.13')
                    .expect('true', done);
            });

            it('should return false if IP is trusted', function(done) {
                var app = express();

                app.use('/', function(req, res) {
                    res.end(httpUtil.isTrustedIP(req) ? 'true' : 'false');
                });
                request(app)
                    .get('/')
                    .set('REMOTE_ADDR', '1.2.3.4')
                    .set('HTTP_CLIENT_IP', '20.20.02.13')
                    .expect('false', done);
            });

            it('should return false if IP is not detected', function() {
                assert.equal(httpUtil.isTrustedIP(null), false);
            });
        });

        describe('verify isPrivateIP() method', function() {
            it('should return false if IP is not detected', function() {
                assert.equal(httpUtil.isPrivateIP(null), false);
            });

            it('should return false if IP is local', function(done) {
                var app = express();

                app.use('/', function(req, res) {
                    res.end(httpUtil.isPrivateIP(req) ? 'true' : 'false');
                });
                request(app)
                    .get('/')
                    .expect('false', done);
            });

            it('should return true if IP is trusted', function(done) {
                var app = express();

                app.use('/', function(req, res) {
                    res.end(httpUtil.isTrustedIP(req) ? 'true' : 'false');
                });
                request(app)
                    .get('/')
                    .set('client-ip', '172.16.0.14')
                    .expect('true', done);
            });

            it('should return true if IP is private', function(done) {
                var app = express();

                app.use('/', function(req, res) {
                    res.end(httpUtil.isPrivateIP(req) ? 'true' : 'false');
                });
                request(app)
                    .get('/')
                    .set('HTTP_CLIENT_IP', '10.20.20.13')
                    .expect('true', done);
            });

            it('should return true if IP is private', function(done) {
                var app = express();

                app.use('/', function(req, res) {
                    res.end(httpUtil.isPrivateIP(req) ? 'true' : 'false');
                });
                request(app)
                    .get('/')
                    .set('HTTP_CLIENT_IP', '20.20.20.13')
                    .set('REMOTE_ADDR', '172.20.0.12')
                    .expect('false', done);
            });
        });

    });

    //Making sure that some of the HTTPStatus Constant we are using match
    describe('verify HTTPStatus', function() {
        it('Making sure that some of the HTTPStatus Constant we are using match', function() {
            assert.equal(httpUtil.HTTPStatus.OK, 200);
            assert.equal(httpUtil.HTTPStatus.FORBIDDEN, 403);
            assert.equal(httpUtil.HTTPStatus.FOUND, 302);
            assert.equal(httpUtil.HTTPStatus.NOT_FOUND, 404);
            assert.equal(httpUtil.HTTPStatus.INTERNAL_SERVER_ERROR, 500);
            assert.equal(httpUtil.HTTPStatus.MOVED_PERMANENTLY, 301);
        });
    });

    describe('verify component ABI', function() {
        it('should stay consistent', function() {
            assert.equal(typeof httpUtil.initialize, 'function');
            assert.equal(typeof httpUtil.getCurrentRoute, 'function');
            assert.equal(typeof httpUtil.getCurrentURI, 'function');
            assert.equal(typeof httpUtil.getCurrentHost, 'function');
            assert.equal(typeof httpUtil.getCurrentPath, 'function');
            assert.equal(typeof httpUtil.getCurrentProtocol, 'function');
            assert.equal(typeof httpUtil.getReferrerURL, 'function');
            assert.equal(typeof httpUtil.getQueryString, 'function');
            assert.equal(typeof httpUtil.getQueryValue, 'function');
            assert.equal(typeof httpUtil.setReqBodyData, 'function');
            assert.equal(typeof httpUtil.getReqBodyData, 'function');
            assert.equal(typeof httpUtil.getClientIP, 'function');
            assert.equal(typeof httpUtil.updateQueryStringParameter, 'function');
            assert.equal(typeof httpUtil.isMobile, 'function');
            assert.equal(typeof httpUtil.isTrustedIP, 'function');
            assert.equal(typeof httpUtil.isPrivateIP, 'function');
            assert.equal(typeof httpUtil.HTTPStatus, 'object');
            assert.equal(typeof httpUtil, 'object');
        });
    });

});
