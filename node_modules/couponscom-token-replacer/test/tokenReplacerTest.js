/*global describe:false, it:false, before:false, after:false, afterEach:false*/

'use strict';

var tokenreplacer = require('../tokenReplacer'),
    httpUtil = require('couponscom-http-util/httpUtil'),
    assert = require('assert');

describe('verify tokenreplacer component', function(){

    describe('verify tokenReplace() method', function(){

        it('should replace token in parameter with its corresponding value', function(){
            var result = tokenreplacer.tokenReplace('http://www.coupons.com/@@@test@@@', {test: 'dummy'});
            assert.equal(result, 'http://www.coupons.com/?test=dummy');
        });

        it('should replace token in parameter with its corresponding value', function(){
            var result = tokenreplacer.tokenReplace('http://www.coupons.com/?hello@@@test@@@', {test: 'dummy'});
            assert.equal(result, 'http://www.coupons.com/?hello&test=dummy');
        });

        it('should replace token in parameter with its corresponding value', function(){
            var result = tokenreplacer.tokenReplace('http://www.coupons.com/@@@test1@@@@@@test2@@@', {test1: 'dummy1', test2: 'dummy2'});
            assert.equal(result, 'http://www.coupons.com/?test1=dummy1&test2=dummy2');
        });

        it('should replace token in parameter with its corresponding value', function(){
            var result = tokenreplacer.tokenReplace('http://www.coupons.com/@@@test1@@@@@@test2@@@', {test1: '', test2: 'dummy2'});
            assert.equal(result, 'http://www.coupons.com/?test2=dummy2');
        });

        it('should replace token in parameter with its corresponding value', function(){
            var result = tokenreplacer.tokenReplace('http://www.coupons.com/@@@test1@@@@@@test2@@@@@@test3@@@', {test1: 'dummy1', test2: 'dummy2', test3: 'dummy3'});
            assert.equal(result, 'http://www.coupons.com/?test1=dummy1&test2=dummy2&test3=dummy3');
        });

        it('should not manipulate the string when token not exist', function() {
            var result = tokenreplacer.tokenReplace('http://www.coupons.com/', {test1: 'dummy1', test2: 'dummy2'});
            assert.equal(result, 'http://www.coupons.com/');
        });

        it('should not manipulate the string when token not exist', function() {
            var result = tokenreplacer.tokenReplace('http://www.coupons.com/@@@test2@@@', {test1: 'dummy1', test2: 'dummy2'});
            assert.equal(result, 'http://www.coupons.com/?test2=dummy2');
        });

        it('should replace token path with its corresponding value', function() {
            var result = tokenreplacer.tokenReplace('http://www.coupons.com/:controller/:action/', {controller: 'coupons', action: 'search'});
            assert.equal(result, 'http://www.coupons.com/coupons/search/');
        });

        it('should replace token path and parameters with its corresponding value', function() {
            var result = tokenreplacer.tokenReplace('http://www.coupons.com/:controller/:action/@@@test@@@', {controller: 'coupons', action: 'search', test: 'foo'});
            assert.equal(result, 'http://www.coupons.com/coupons/search/?test=foo');
        });
    });

    describe('verify tokenReplacePNZ() method', function () {
        it('should replace @@@pnz@@ token with appropriate pnz', function() {
            var result = tokenreplacer.tokenReplacePNZ('http://www.coupons.com/@@@pnz@@@');
            assert.equal(result, 'http://www.coupons.com/');
        });

        it('should replace @@@pnz@@ token with appropriate pnz', function() {
            //Faking pnz reading from httpUtil
            httpUtil.getQueryValue = function (params) {
                if (params === 'pid') {
                    return '13306';
                } else if (params === 'nid') {
                    return '10';
                } else if (params === 'zid') {
                    return 'iq37';
                }
            };
            var result = tokenreplacer.tokenReplacePNZ('http://www.coupons.com/@@@pnz@@@');
            assert.equal(result, 'http://www.coupons.com/?pid=13306&nid=10&zid=iq37');
        });
    });

    describe('verify component ABI', function () {
        assert.equal(typeof tokenreplacer.tokenReplace, 'function');
        assert.equal(typeof tokenreplacer.tokenReplacePNZ, 'function');
    });

});
