/*global describe:false, it:false, before:false, after:false, beforeEach: false, afterEach:false*/

'use strict';

var assert = require('assert'),
    request = require('../request.js'),
    nock = require('nock'),
    logger = require('couponscom-logger/logger'),
    logEntryStat = '';

describe('request', function()  {

    beforeEach(function() {
        logEntryStat = '';
        logger.debug = function() {};
        logger.info = function() {};
        logger.error = function() {};
        logger.metric = function(entry) {
            logEntryStat =  logEntryStat + entry;
        };
        logger.warn = function(entry) {
            logEntryStat =  logEntryStat + entry;
        };

    });

    it('Should get data from request Library on GET call', function()  {
        var testFailURL = nock('http://example.coupons.com')
            .get('/fakeUrl')
            .reply(200, 'perfect');

        request({
            url: 'http://example.coupons.com/fakeUrl',
            method: 'GET'
        }, function(error, response, body){
            assert.notEqual(logEntryStat, '');
            assert.equal(body, 'perfect');
            assert.equal(response.statusCode, 200);
        });
    });

    it('Should get data from request Library on POST call', function()  {
        var testFailURL = nock('http://example.coupons.com')
            .post('/fakeJSONUrl')
            .reply(200, '{"passed" : "totally"}');

        request({
            url: 'http://example.coupons.com/fakeJSONUrl',
            method: 'POST',
            headers: {
                'Accept': 'application/json'
            },
        }, function(error, response, body){
            var data = JSON.parse(body);
            assert.notEqual(logEntryStat, '');
            assert.equal(data.passed, 'totally');
            assert.equal(response.statusCode, 200);

        });
    });

    it('Should return an error and a 400 response', function()  {
        var testFailURL = nock('http://example.coupons.com')
            .get('/fakeUrl')
            .reply(500, 'error');

        request({
            url: 'http://example.coupons.com/fakeUrl',
            method: 'GET'
        }, function(error, response, body){
            assert.notEqual(logEntryStat, '');
            assert.equal(body, 'error');
            assert.equal(response.statusCode, 500);
        });
    });


});
