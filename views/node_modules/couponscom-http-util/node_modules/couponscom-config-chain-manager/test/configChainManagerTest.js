/*global describe:false, it:false, before:false, after:false, beforeEach: false, afterEach:false*/

'use strict';

var assert = require('assert'),
    nconf = require('../config-chain-manager.js'),
    logger = require('couponscom-logger');

describe('couponscom-config-chain-manager', function()  {

    logger.debug = function() {};
    logger.info = function() {};
    logger.error = function() {};
    logger.warn = function() {};

    describe('veirfy getData() method', function() {
        it('should return correct value for file config request', function() {
            var testData = nconf.getData({
                name: 'testData',
                filename: __dirname + '/../test/mock/test.json'
            });
            assert.equal(testData, 'testData');
        });

        it('should return undefined if file does not exist', function() {
            var testData = nconf.getData({
                name: 'testData',
                filename: __dirname + '/../test/mock/test_fake.json'
            });
            assert.equal(testData, undefined);
        });

        it('should return value with env awareness', function() {
            var testData = nconf.getData({
                name: 'testData',
                filename: __dirname + '/../test/mock/test.json',
                env: 'DEV'
            });
            assert.equal(testData, 'testData_Dev');
        });

        it('should return value when env not valid', function() {
            var testData = nconf.getData({
                name: 'testData',
                filename: __dirname + '/../test/mock/test.json',
                env: 'devprod'
            });
            assert.equal(testData, 'testData');
        });
    });

    describe('verify setFeatureData() method', function() {
        it('should generate value for theme and feature', function() {
            nconf.setFeatureData({
                name: 'mock',
                dirname: __dirname + '/mock_features'
            });
            assert.equal(nconf.getFeatureData({name: 'mock', themeName: 'theme1', featurename: 'DEFAULT'}), 'hi');
        });

        it('should throw PARSING error', function() {
            var testData = nconf.setFeatureData({
                name: 'mock',
                dirname: __dirname + '/mock'
            });
            assert.equal(nconf.getFeatureData({name: 'mock'}), '');
        });
    });

    describe('verify getFeatureData() method', function() {
        it('should throw error if invalid paramater passed in function call', function() {
            assert.equal(nconf.getFeatureData('fake'), '');
            assert.equal(nconf.getFeatureData({fakedata: 'fake'}), '');
        });

        it('should return empty if it is invalid data', function() {
            assert.equal(nconf.getFeatureData({name: 'fake', themeName: 'theme1'}), '');
            assert.equal(nconf.getFeatureData({name: 'fake2', themeName: 'theme1', featurename: 'fakeFeature'}), '');
        });

        it('should return valid value for feature', function() {
            nconf.setFeatureData({
                name: 'mock',
                dirname: __dirname + '/mock_features'
            });
            assert.equal(nconf.getFeatureData({name: 'mock', themeName: 'theme1'}), 'hi');
            assert.equal(nconf.getFeatureData({name: 'mock', themeName: 'theme1', featurename: 'DEFAULT'}), 'hi');
            assert.equal(nconf.getFeatureData({name: 'mock', themeName: 'theme1', featurename: 'fake'}), 'hi');
            assert.equal(nconf.getFeatureData({name: 'mock', themeName: 'theme2', featurename: 'test2'}), 'hi2');
            assert.equal(nconf.getFeatureData({name: 'mock', themeName: 'theme2', featurename: 'test3'}), 'hi3');
            assert.equal(nconf.getFeatureData({name: 'mock', themeName: 'theme2', featurename: 'test4'}), 'hi3');
            assert.equal(nconf.getFeatureData({name: 'mock', themeName: 'theme2', featurename: 'test5'}), 'hi3');
            assert.equal(nconf.getFeatureData({name: 'mock', themeName: 'theme2', featurename: 'fake2'}), '');
            assert.equal(nconf.getFeatureData({name: 'mock', themeName: 'faketheme'}), '');
            assert.equal(nconf.getFeatureData({name: 'mock', themeName: 'faketheme', featurename: 'DEFAULT'}), '');
            assert.equal(nconf.getFeatureData({name: 'mock', themeName: 'faketheme', featurename: 'fake'}), '');
        });

        it('should return valid value for key without feature set', function() {
            nconf.clear('mock_theme1_DEFAULT');
            nconf.clear('mock_theme2_DEFAULT');
            nconf.setFeatureData({
                name: 'mock',
                dirname: __dirname + '/mock_without_features'
            });
            assert.deepEqual(nconf.getFeatureData({name: 'mock', themeName: 'theme1'}), {test: 'test1'});
            assert.deepEqual(nconf.getFeatureData({name: 'mock', themeName: 'theme2'}), {test: 'test2'});
            assert.deepEqual(nconf.getFeatureData({name: 'mock', themeName: 'theme1', featurename: 'DEFAULT'}), {test: 'test1'});
            assert.deepEqual(nconf.getFeatureData({name: 'mock', themeName: 'theme1', featurename: 'fakeee'}), {test: 'test1'});
            assert.equal(nconf.getFeatureData({name: 'mock', themeName: 'faketheme'}), '');
            assert.equal(nconf.getFeatureData({name: 'mock', themeName: 'faketheme', featurename: 'DEFAULT'}), '');
            assert.equal(nconf.getFeatureData({name: 'mock', themeName: 'faketheme', featurename: 'fake'}), '');
        });

        it('should return valid value for key without feature set and env awareness', function() {
            nconf.clear('mock_theme1_DEFAULT');
            nconf.clear('mock_theme2_DEFAULT');
            nconf.clear('mock_theme1');
            nconf.clear('mock_theme2');
            nconf.setFeatureData({
                name: 'mock',
                dirname: __dirname + '/mock_without_features',
                env: 'dev'
            });
            assert.deepEqual(nconf.getFeatureData({name: 'mock', themeName: 'theme1'}), {test: 'testdev1'});
            assert.deepEqual(nconf.getFeatureData({name: 'mock', themeName: 'theme2'}), {test: 'test2'});
            assert.deepEqual(nconf.getFeatureData({name: 'mock', themeName: 'theme1', featurename: 'DEFAULT'}), {test: 'testdev1'});
            assert.deepEqual(nconf.getFeatureData({name: 'mock', themeName: 'theme1', featurename: 'fakeee'}), {test: 'testdev1'});
            assert.equal(nconf.getFeatureData({name: 'mock', themeName: 'faketheme'}), '');
            assert.equal(nconf.getFeatureData({name: 'mock', themeName: 'faketheme', featurename: 'DEFAULT'}), '');
            assert.equal(nconf.getFeatureData({name: 'mock', themeName: 'faketheme', featurename: 'fake'}), '');
        });

        it('should return valid value for feature with ENV awareness reading', function() {
            nconf.clear('mock_theme2_test3');
            nconf.clear('mock_theme2_test4');
            nconf.clear('mock_theme2_test5');
            //Env awareness
            nconf.setFeatureData({
                name: 'mock',
                dirname: __dirname + '/mock_features',
                env: 'dev'
            });
            assert.equal(nconf.getFeatureData({name: 'mock', themeName: 'theme2', featurename: 'test3'}), 'hidev3');
            assert.equal(nconf.getFeatureData({name: 'mock', themeName: 'theme2', featurename: 'test4'}), 'hidev3');
            assert.equal(nconf.getFeatureData({name: 'mock', themeName: 'theme2', featurename: 'test5'}), 'hidev3');
            assert.equal(nconf.getFeatureData({name: 'mock', themeName: 'faketheme'}), '');
            assert.equal(nconf.getFeatureData({name: 'mock', themeName: 'faketheme', featurename: 'DEFAULT'}), '');
            assert.equal(nconf.getFeatureData({name: 'mock', themeName: 'faketheme', featurename: 'fake'}), '');
        });

        it('should return valid data from the base', function() {
            nconf.setFeatureData({
                name: 'mock_base',
                dirname: __dirname + '/mock_base'
            });
            assert.deepEqual(nconf.getFeatureData({name: 'mock_base'}), {test: 'test1'});
        });
    });

    describe('verify component ABI', function() {
        it('should stay consistent', function() {
            assert.equal(typeof nconf.setFeatureData, 'function');
            assert.equal(typeof nconf.getFeatureData, 'function');
            assert.equal(typeof nconf.getData, 'function');
            //The following is public method of nconf we depends on and use
            assert.equal(typeof nconf.add, 'function');
            assert.equal(typeof nconf.use, 'function');
            assert.equal(typeof nconf.remove, 'function');
            assert.equal(typeof nconf.clear, 'function');
            assert.equal(typeof nconf.set, 'function');
            assert.equal(typeof nconf.reset, 'function');
            assert.equal(typeof nconf.get, 'function');
        });
    });

});
