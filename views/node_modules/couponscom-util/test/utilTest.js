/*global describe:false, it:false, before:false, after:false, beforeEach: false, afterEach:false*/

'use strict';

var util = require('../util'),
    request = require('supertest'),
    express = require('express'),
    assert = require('assert');

describe('couponscom-util', function () {
    describe('verify getAssignedDate() method', function() {
        it('should return current x date from current date', function() {
            var currDate = new Date('2015-01-01');
            assert.equal(new Date(util.getAssignedDate(5, new Date(currDate))).getDate(), 5);
            assert.equal(new Date(util.getAssignedDate(5, new Date(currDate))).getMonth(), 0);
            assert.equal(new Date(util.getAssignedDate(5, new Date(currDate))).getFullYear(), 2015);
        });

        it('should return current x date from current date', function() {
            var currDate = new Date('2015-01-15');
            assert.equal(new Date(util.getAssignedDate(-9, new Date(currDate))).getDate(), 5);
            assert.equal(new Date(util.getAssignedDate(-9, new Date(currDate))).getMonth(), 0);
            assert.equal(new Date(util.getAssignedDate(-9, new Date(currDate))).getFullYear(), 2015);
        });

        it('should return current x date from current date', function() {
            var currDate = new Date('2015-01-01');
            assert.equal(new Date(util.getAssignedDate(-9, new Date(currDate))).getDate(), 22);
            assert.equal(new Date(util.getAssignedDate(-9, new Date(currDate))).getMonth(), 11);
            assert.equal(new Date(util.getAssignedDate(-9, new Date(currDate))).getFullYear(), 2014);
        });

    });

    describe('verify getShortDateFormat() method', function() {
        it('should return valid short date format', function() {
            assert.equal(util.getShortDateFormat('2015-02-01T20:00:00'), '02/01/15');
            assert.equal(util.getShortDateFormat('2014-11-15T20:01:00'), '11/15/14');
        });
    });

    describe('verify getISODateFormat() method', function() {
        it('should return valid short date format', function() {
            assert.equal(util.getISODateFormat('2015-02-01T20:00:00'), '2015-02-01');
            assert.equal(util.getISODateFormat('2014-11-15T20:01:00'), '2014-11-15');
        });
    });

    describe('verify getShortMonth() method', function() {
        it('should return valid short month', function() {
            assert.equal(util.getShortMonth('2015-02-01T20:00:00'), 'Feb');
            assert.equal(util.getShortMonth('2014-11-15T20:01:00'), 'Nov');
        });
    });

    describe('verify getFullDate() method', function() {
        it('should return valid full date', function() {
            assert.equal(util.getFullDate('2015-02-01T20:00:00'), 'February 1st 2015');
            assert.equal(util.getFullDate('2015-03-02T20:00:00'), 'March 2nd 2015');
            assert.equal(util.getFullDate('2015-04-03T20:00:00'), 'April 3rd 2015');
            assert.equal(util.getFullDate('2015-05-04T20:00:00'), 'May 4th 2015');
            assert.equal(util.getFullDate('2014-11-15T20:00:00'), 'November 15th 2014');
        });
    });

    describe('verify cloneObj() method', function() {
        it('should return shallow clone object without reference', function() {
            var obj1 = {
                test: 'test1',
                test2: 'test2',
                test3: {
                    test: 'hi'
                }
            };
            var obj2 = util.cloneObj(obj1);
            assert.deepEqual(obj2, obj1);

            //Cloning without reference testing
            obj2.test2 = 'hi';
            assert.notEqual(obj1.test2, obj2.test2);
        });
    });

    describe('verify extendObj() method', function() {
        it('should extend object and overwrite the existing attribute', function() {
            assert.deepEqual(util.extendObj({a:1}),         {a:1});
            assert.deepEqual(util.extendObj({a:1}, []),         {a:1});
            assert.deepEqual(util.extendObj({a:1}, null),       {a:1});
            assert.deepEqual(util.extendObj({a:1}, true),       {a:1});
            assert.deepEqual(util.extendObj({a:1}, false),      {a:1});
            assert.deepEqual(util.extendObj({a:1}, {b:2}),      {a:1, b:2});
            assert.deepEqual(util.extendObj({a:1, b:2}, {b:3}), {a:1, b:3});
        });
    });

    describe('verify isEmptyObj() method', function() {
        it('should return true if object is empty', function() {
            assert.equal(util.isEmptyObj(null), true);
            assert.equal(util.isEmptyObj({}), true);
            assert.equal(util.isEmptyObj(''), true);
        });

        it('should return false if object is not empty', function() {
            assert.equal(util.isEmptyObj({test: 1}), false);
            assert.equal(util.isEmptyObj({test: 1, test2: 3}), false);
        });
    });

    describe('verify removeEmptyObjFromArr() method', function() {
        it('should return array has no empty object', function() {
            assert.deepEqual(util.removeEmptyObjFromArr([1, null, 3]), [1, 3]);
            assert.deepEqual(util.removeEmptyObjFromArr([1, '', 3, null, 5]), [1, 3, 5]);
        });
    });

    describe('verify removeElemFromArr() method', function() {
        it('should return array with given specific element being removed', function() {
            assert.deepEqual(util.removeElemFromArr([1, 2, 3, 4], 3), [1, 2, 4]);
            assert.deepEqual(util.removeElemFromArr([1, 2, 3, 2, 5], 2), [1, 3, 5]);
        });
    });

    describe('verify arrayIntersect() method', function() {
        it('should return empty array if there is no common between 2 array', function() {
            assert.deepEqual(util.arrayIntersect([1, 2, 3], [4, 5]), []);
        });

        it('should return empty array if there is no common between 2 array', function() {
            assert.deepEqual(util.arrayIntersect([1, 2, 3], [4, 5]), []);
            assert.deepEqual(util.arrayIntersect([1, 2, 3], ['1', '2', '3']), [1, 2, 3]);
            assert.deepEqual(util.arrayIntersect([1, 2, 3, 5, 2], [1, 2]), [1, 2]);
            assert.deepEqual(util.arrayIntersect([1, 2], [3, 4, 1, 2]), [1, 2]);
        });
    });

    describe('verify uniqueConcat() method', function() {
        it('should concat 2 arrays which do not have common element', function() {
            assert.deepEqual(util.uniqueConcat([1, 2, 3], [4, 5, 6]), [1, 2, 3, 4, 5, 6]);
            assert.deepEqual(util.uniqueConcat(['one', 'two'], ['five', 'six']), ['one', 'two', 'five', 'six']);
            assert.deepEqual(util.uniqueConcat([1, 4], ['two', 'three']), [1, 4, 'two', 'three']);

            //object concat
            var identity = function(obj) {return obj.test; };
            assert.deepEqual(util.uniqueConcat([{test: 1}, {test: 2}], [{test: 3}, {test: 4}], identity), [{test: 1}, {test: 2}, {test: 3}, {test: 4}]);
        });

        it('should concat 2 arrays and dedup', function() {
            assert.deepEqual(util.uniqueConcat([1, 2, 3], [4, 1, 6, 2]), [1, 2, 3, 4, 6]);
            assert.deepEqual(util.uniqueConcat(['one', 'two'], ['one', 'three', 'four']), ['one', 'two', 'three', 'four']);

            //object checking (resorting array based on integer key)
            var identity1 = function(obj) {return obj.id; };
            assert.deepEqual(util.uniqueConcat([{id: 1}, {id: 2}, {id: 3}, {id: 5}], [{id: 4}, {id: 1}, {id: 7}, {id: 2}], identity1), [{id: 1}, {id: 2}, {id: 3}, {id: 4}, {id: 5}, {id: 7}]);

            //Object checking (not resorting array, prevent hashmap to sort by key integer)
            var identity2 = function(obj) {return 'sort_' + obj.id; };
            assert.deepEqual(util.uniqueConcat([{id: 1}, {id: 2}, {id: 3}, {id: 5}], [{id: 4}, {id: 1}, {id: 7}, {id: 2}], identity2), [{id: 1}, {id: 2}, {id: 3}, {id: 5}, {id: 4}, {id: 7}]);
        });

    });

    describe('verify generateGUUID() method', function() {
        it('should return valid GUUID string', function() {
            assert.equal(util.generateGUUID().length, 36);
        });
    });

    describe('verify titleize() method', function() {
        it('should return title-ized string', function() {
            assert.equal(util.titleize('dinner multi serve'), 'Dinner Multi Serve');
            assert.equal(util.titleize('baby and toddler'), 'Baby and Toddler');
        });
    });

    describe('verify component ABI', function() {
        it('should stay consistent', function() {
            assert.equal(typeof util.getAssignedDate, 'function');
            assert.equal(typeof util.getISODateFormat, 'function');
            assert.equal(typeof util.getShortMonth, 'function');
            assert.equal(typeof util.getFullDate, 'function');
            assert.equal(typeof util.cloneObj, 'function');
            assert.equal(typeof util.extendObj, 'function');
            assert.equal(typeof util.isEmptyObj, 'function');
            assert.equal(typeof util.removeEmptyObjFromArr, 'function');
            assert.equal(typeof util.removeElemFromArr, 'function');
            assert.equal(typeof util.arrayIntersect, 'function');
            assert.equal(typeof util.uniqueConcat, 'function');
            assert.equal(typeof util.generateGUUID, 'function');
            assert.equal(typeof util.getShortDateFormat, 'function');
            assert.equal(typeof util.titleize, 'function');
        });
    });
});
